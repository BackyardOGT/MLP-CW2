{"version":3,"sources":["components/Card.js","components/Pieces.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["CardSquare","pos","player","data","thisCardSelected","i","j","initColour","useState","colour","setColour","console","log","useEffect","style","background","gridRow","gridColumn","Card","id","currentPlayer","setCardSelected","cardSelected","squares","push","display","flexDirection","width","height","gridTemplateRows","repeat","gridTemplateColumns","onClick","PawnSvg","viewBox","xmlns","points","fill","KingSvg","Piece","name","clickSquare","setPieceSelected","row","col","overflow","position","top","right","fontWeight","King","props","Pawn","Board","state","bindSquares","pieceSelected","playerData","Square","pieces","placePlayer","king","pawns","map","player1","player2","validMove","setValidMove","newColour","valid","cardData","mathjs","iCard","jCard","iFlipped","jFlipped","every","v","some","pawnPos","isValidMove","Game","sendMove","resetGame","toggleGameMode","stepBot","cards","justifyContent","className","color","margin","marginTop","spare_card","fontSize","border","borderRadius","mode","App","boardState","setBoardState","readApi","fetch","then","res","json","piece","card","move","method","headers","Accept","body","JSON","stringify","winner","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f10b589.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { set } from \"mathjs/lib/esm/utils/object\";\n\nexport function CardSquare({ pos, player, data, thisCardSelected }) {\n  const [i, j] = pos;\n  const initColour = (i + j) % 2 === 0 ? \"var(--light)\" : \"transparent\";\n  const [colour, setColour] = useState(initColour);\n  console.log(pos, player, data);\n  useEffect(() => {\n    // if it's valid then blue\n    // server is row, col\n    if (data[player === 2 ? 5 - i - 1 : i][player === 2 ? 5 - j - 1 : j]) {\n      setColour(\"var(--cardValid\");\n      if (thisCardSelected) setColour(\"var(--cardValidHighlight\");\n    } else if (i === j && i === 2) {\n      setColour(\"var(--cardCenter\");\n      if (thisCardSelected) setColour(\"var(--cardCenterHighlight\");\n    } else {\n      setColour(initColour);\n    }\n  }, [initColour, thisCardSelected, data, player, i, j]);\n\n  return (\n    <div\n      style={{\n        background: colour,\n        gridRow: pos[0] + 1,\n        gridColumn: pos[1] + 1,\n      }}\n    />\n  );\n}\n\nexport default function Card({\n  data,\n  id,\n  player,\n  currentPlayer,\n  setCardSelected,\n  cardSelected,\n}) {\n  const onClick = () => {\n    if (player === currentPlayer && id !== \"next\")\n      setCardSelected({ id, data });\n  };\n\n  // 5 x 5 grid of divs\n  let i, j;\n  let squares = [];\n  for (i = 0; i < 5; i++) {\n    for (j = 0; j < 5; j++) {\n      squares.push(\n        <CardSquare\n          key={\"card\" + player + id + i + \", \" + j}\n          pos={[i, j]}\n          player={player}\n          data={data}\n          thisCardSelected={\n            cardSelected && cardSelected.id === id && currentPlayer === player\n          }\n        />\n      );\n    }\n  }\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <div\n        style={{\n          width: 200,\n          height: 200,\n          display: \"grid\",\n          gridTemplateRows: \"1fr \".repeat(5),\n          gridTemplateColumns: \"1fr \".repeat(5),\n        }}\n        onClick={onClick}\n      >\n        {squares}\n      </div>\n      {id === \"next\" ? \"Next card\" : null}\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction PawnSvg({player}) {\n    return <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <polygon points=\"0,100 50,0, 100,100\" fill={player === 1 ? \"var(--lightPiece)\" : \"var(--darkPiece)\"}/>\n    </svg>;\n}\n\nfunction KingSvg({player}) {\n    return <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <polygon points=\"0,100 16,0 32,60 48,0 64,60 80,0 100,100\" fill={player === 1 ? \"var(--lightPiece)\" : \"var(--darkPiece)\"}/>\n    </svg>;\n}\n\nfunction Piece({\n                   name,\n                   pos,\n                   player,\n                   i,\n                   currentPlayer,\n                   clickSquare,\n                   setPieceSelected,\n               }) {\n    let [row, col] = pos;\n    const clickHandler = () => {\n        if (currentPlayer === player) {\n            console.log(\"Piece clicked\", name, pos, currentPlayer, i, player);\n            setPieceSelected({name, player, i, pos});\n        } else if (player !== currentPlayer) {\n            // try to take\n            clickSquare(pos);\n        }\n    };\n    return (\n        <div\n            onClick={clickHandler}\n            style={{\n                gridRow: row + 1,\n                gridColumn: col + 1,\n                height: \"100%\",\n                width: \"100%\",\n                overflow: \"hidden\",\n                position: \"relative\"\n            }}\n        >\n            {name === \"king\" ? <KingSvg player={player}/> : <PawnSvg player={player}/>}\n            {(i || i === 0) ? <p style={{position: \"absolute\", top: 0, right: 0, fontWeight: 600,}}>{i}</p> : null}\n        </div>\n    );\n}\n\nfunction King(props) {\n    return <Piece {...props} name={\"king\"}/>;\n}\n\nfunction Pawn(props) {\n    return <Piece {...props} name={\"pawn\"}/>;\n}\n\nexport {King, Pawn};\n","import React, { useState, useEffect } from \"react\";\nimport { King, Pawn } from \"./Pieces\";\nimport * as mathjs from \"mathjs\";\n\nexport default function Board({\n  state,\n  bindSquares,\n  setPieceSelected,\n  currentPlayer,\n  pieceSelected,\n  cardSelected,\n  playerData,\n}) {\n  // 5 x 5 grid of divs\n  let i, j;\n  let squares = [];\n  for (i = 0; i < 5; i++) {\n    for (j = 0; j < 5; j++) {\n      squares.push(\n        <Square\n          key={i + \", \" + j}\n          pos={[i, j]}\n          pieceSelected={pieceSelected}\n          bindSquares={bindSquares}\n          cardSelected={cardSelected}\n          currentPlayer={currentPlayer}\n          playerData={playerData}\n        />\n      );\n    }\n  }\n\n  // place pieces\n  let pieces = [];\n  const placePlayer = (data, player) => {\n    // king\n    pieces.push(\n      <King\n        key={player + \"king\"}\n        player={player}\n        pos={data.king}\n        clickSquare={bindSquares}\n        setPieceSelected={setPieceSelected}\n        currentPlayer={currentPlayer}\n        pieceSelected={pieceSelected}\n      />\n    );\n    // pawns\n    data.pawns.map((pos, i) =>\n      pieces.push(\n        <Pawn\n          key={player + \"pawn\" + i}\n          pos={pos}\n          i={i}\n          player={player}\n          clickSquare={bindSquares}\n          setPieceSelected={setPieceSelected}\n          currentPlayer={currentPlayer}\n          pieceSelected={pieceSelected}\n        />\n      )\n    );\n  };\n\n  placePlayer(state.player1, 1);\n  placePlayer(state.player2, 2);\n\n  return (\n    <div>\n      <div\n        style={{\n          width: 600,\n          height: 600,\n          display: \"grid\",\n          gridTemplateRows: \"20% \".repeat(5),\n          gridTemplateColumns: \"20% \".repeat(5),\n        }}\n      >\n        {squares}\n        {pieces}\n      </div>\n    </div>\n  );\n}\n\nexport function Square({\n  pos,\n  pieceSelected,\n  currentPlayer,\n  cardSelected,\n  bindSquares,\n  playerData,\n}) {\n  const [i, j] = pos;\n  const initColour = (i + j) % 2 === 0 ? \"var(--light)\" : \"transparent\";\n  const [colour, setColour] = useState(initColour);\n  const [validMove, setValidMove] = useState(false);\n\n  const clickHandler = () => {\n    if (bindSquares && validMove) bindSquares(pos);\n  };\n\n  useEffect(() => {\n    const [i, j] = pos;\n\n    function isOccupied() {\n      // check king\n      if (pos.every((v, i) => v === playerData.king[i])) {\n        console.log(playerData.king, playerData.pawns, pos, true);\n        return true;\n      }\n      // otherwise occupied if any pawns are\n      return playerData.pawns.some((pawnPos) => {\n        return pos.every((v, i) => v === pawnPos[i]);\n      });\n    }\n\n    const isValidMove = () => {\n      let valid = false;\n      const cardData = cardSelected.data;\n      // where on card is this wrt selected piece\n      const [iCard, jCard] = mathjs.subtract(\n        mathjs.add([i, j], [2, 2]),\n        pieceSelected.pos\n      );\n      // need to flip if other player\n      let iFlipped = currentPlayer === 2 ? 4 - iCard : iCard;\n      let jFlipped = currentPlayer === 2 ? 4 - jCard : jCard;\n      // card values are 1 and 0\n      if (0 <= iFlipped && iFlipped <= 4 && 0 <= jFlipped && jFlipped <= 4) {\n        if (cardData[iFlipped][jFlipped] && !isOccupied()) {\n          valid = true;\n        }\n      }\n      return valid;\n    };\n\n    let newColour = initColour;\n\n    if (pieceSelected && cardSelected) {\n      const valid = isValidMove();\n      setValidMove(valid);\n      if (valid) {\n        newColour = \"var(--validMove)\";\n      }\n    }\n    setColour(newColour);\n  }, [\n    validMove,\n    initColour,\n    pieceSelected,\n    cardSelected,\n    pos,\n    currentPlayer,\n    playerData,\n  ]);\n\n  return (\n    <div\n      style={{\n        background: colour,\n        gridRow: pos[0] + 1,\n        gridColumn: pos[1] + 1,\n      }}\n      onClick={clickHandler}\n    />\n  );\n}\n","import React, {useState, useEffect} from \"react\";\nimport Card from \"./Card\";\nimport Board, {Square} from \"./Board\";\nimport * as mathjs from \"mathjs\";\nimport \"./Game.css\";\n\n\nexport default function Game({state, sendMove, resetGame, toggleGameMode, stepBot}) {\n    const [pieceSelected, setPieceSelected] = useState(null);\n    const [cardSelected, setCardSelected] = useState(null);\n    const currentPlayer = state.player;\n\n    const playerData = currentPlayer === 1 ? state.player1 : state.player2;\n\n    useEffect(() => {\n        // init to 1st card\n        setCardSelected({id: 0, data: playerData.cards[0]});\n    }, [playerData]);\n\n    // after move reset state\n    function afterMove() {\n        setPieceSelected(null);\n        setCardSelected(0);\n    }\n\n    function validMove(pos) {\n        if (pieceSelected) {\n            const [i, j] = pos;\n            const cardData = cardSelected.data;\n            // where on card is this wrt selected piece\n            const [iCard, jCard] = mathjs.subtract(\n                mathjs.add([i, j], [2, 2]),\n                pieceSelected.pos\n            );\n            // need to flip if other player\n            let iFlipped = currentPlayer === 2 ? 4 - iCard : iCard;\n            let jFlipped = currentPlayer === 2 ? 4 - jCard : jCard;\n            // card values are 1 and 0\n            if (0 <= iFlipped && iFlipped <= 4 && 0 <= jFlipped && jFlipped <= 4) {\n                if (cardData[iFlipped][jFlipped]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function bindSquares(pos) {\n        // note this can be called from squares and from pieces\n        // where pieces need to propagate click down eg. when taking\n        // check occupied done in squares / pieces\n        // here we just check it's a valid move on the card\n        if (validMove(pos)) {\n            sendMove(pieceSelected, cardSelected, pos);\n            afterMove();\n        } else {\n            setPieceSelected(null);\n        }\n    }\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                height: \"100%\",\n                width: \"100%\",\n                justifyContent: \"space-around\",\n            }}\n        >\n            <div\n                style={{\n                    display: \"flex\",\n                    width: \"100%\",\n                    justifyContent: \"space-around\",\n                }}\n            >\n                <div className=\"cardDiv\">\n                    <h2>Player 1</h2>\n                    <Card\n                        data={state.player1.cards[0]}\n                        player={1}\n                        id={0}\n                        setCardSelected={setCardSelected}\n                        currentPlayer={currentPlayer}\n                        cardSelected={cardSelected}\n                    />\n                    <Card\n                        data={state.player1.cards[1]}\n                        player={1}\n                        id={1}\n                        setCardSelected={setCardSelected}\n                        currentPlayer={currentPlayer}\n                        cardSelected={cardSelected}\n                    />\n                </div>\n                <Board\n                    state={state}\n                    bindSquares={bindSquares}\n                    setPieceSelected={setPieceSelected}\n                    currentPlayer={currentPlayer}\n                    pieceSelected={pieceSelected}\n                    cardSelected={cardSelected}\n                    playerData={playerData}\n                />\n                <div className=\"cardDiv\">\n                    <h2 style={{background: \"#eeeeee\", color: \"black\"}}>Player 2</h2>\n                    <Card\n                        data={state.player2.cards[0]}\n                        player={2}\n                        id={0}\n                        setCardSelected={setCardSelected}\n                        currentPlayer={currentPlayer}\n                        cardSelected={cardSelected}\n                    />\n                    <Card\n                        data={state.player2.cards[1]}\n                        player={2}\n                        id={1}\n                        setCardSelected={setCardSelected}\n                        currentPlayer={currentPlayer}\n                        cardSelected={cardSelected}\n                    />\n                </div>\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    margin: \"0 auto\",\n                    marginTop: 25,\n                    width: \"50%\",\n                    justifyContent: \"space-around\",\n                }}\n            >\n                <Card data={state.spare_card} player={1} currentPlayer={1} id=\"next\"/>\n                <div\n                    style={{\n                        margin: 10,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <button style={{background: \"var(--light)\", color: \"var(--dark)\", fontSize: \"1.5rem\",\n                        border: 0, borderRadius: 10, marginTop: 3}}\n                            onClick={resetGame}>Reset</button>\n                    <button style={{background: \"var(--light)\", color: \"var(--dark)\", fontSize: \"1.5rem\",\n                        border: 0, borderRadius: 10, marginTop: 3}}\n                            onClick={toggleGameMode}>Toggle game mode</button>\n                    <button style={{background: \"var(--light)\", color: \"var(--dark)\", fontSize: \"1.5rem\",\n                        border: 0, borderRadius: 10, marginTop: 3}}\n                            onClick={stepBot}>Step bot</button>\n                    <p>Turn: Player {currentPlayer}</p>\n                    <p>Mode: {state.mode}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n    const [boardState, setBoardState] = useState(null);\n\n    const readApi = () => {\n        fetch(\"http://localhost:5000/getState\")\n            .then((res) => res.json())\n            .then((data) => {\n                setBoardState(data);\n            });\n    };\n\n    const sendMove = (piece, card, pos) => {\n        const move = {...piece, id: card.id, pos};\n        fetch(\"http://localhost:5000/sendMove\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(move),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                setBoardState(data);\n                if (data.winner !== 0) {\n                    alert(\"Winner is player \" + data.winner);\n                }\n            });\n    };\n\n    const resetGame = () => {\n        fetch(\"http://localhost:5000/reset\")\n            .then((res) => res.json())\n            .then((data) => {\n                setBoardState(data);\n            });\n    };\n\n    const toggleGameMode = () => {\n        fetch(\"http://localhost:5000/toggleGameMode\")\n            .then((res) => res.json())\n            .then((data) => {\n                setBoardState(data);\n            });\n    };\n\n    const stepBot = () => {\n        fetch(\"http://localhost:5000/stepBot\")\n            .then((res) => res.json())\n            .then((data) => {\n                setBoardState(data);\n                if (data.winner !== 0) {\n                    alert(\"Winner is player \" + data.winner);\n                }\n            });\n    };\n\n    useEffect(() => {\n        if (!boardState) readApi();\n    });\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {boardState ? (\n                    <Game\n                        state={boardState}\n                        readApi={readApi}\n                        sendMove={sendMove}\n                        resetGame={resetGame}\n                        toggleGameMode={toggleGameMode}\n                        stepBot={stepBot}\n                    />\n                ) : (\n                    <>No board state, check Flask backend</>\n                )}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}